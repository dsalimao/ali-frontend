#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import base64

a=b'PCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBYSFRNTCAxLjAgVHJhbnNpdGlvbmFsLy9FTiIgI' \
  b'mh0dHA6Ly93d3cudzMub3JnL1RSL3hodG1sMS9EVEQveGh0bWwxLXRyYW5zaXRpb25hbC5kdGQiPjxo' \
  b'dG1sIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIiB4bWxuczpvPSJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpv' \
  b'ZmZpY2UiIHhtbG5zOnY9InVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206dm1sIj4gIDxoZWFkPiAgICA8bWV0YSBjb250ZW50PSJ0ZXh0L2h0bWw' \
  b'gY2hhcnNldD11dGYtOCIgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiAvPiAgICA8bWV0YSBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIG' \
  b'luaXRpYWwtc2NhbGU9MS4wIiBuYW1lPSJ2aWV3cG9ydCIgLz4gICAgPG1ldGEgY29udGVudD0iSUU9ZWRnZSIgaHR0cC1lcXVpdj0iWC1VQS1Db21' \
  b'wYXRpYmxlIiAvPiAgICA8bGluayBocmVmPSJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9T3BlbitTYW5zOjYwMCw0MDA' \
  b'sMzAwIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiAvPiAgICA8dGl0bGU-VWRhY2l0eTwvdGl0bGU-ICAgIDxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI-ICAgICAgLmRlcy10YWwgeyAgICAgICAgdGV4dC1hbGlnbjogbGVmdCAhaW1wb3J0YW50OyAgICAgIH0gICAgICAuZGVzLXRhbC0yIHsgICAgICAgIHRleHQtYWxpZ246IHJpZ2h0ICFpbXBvcnRhbnQ7ICAgICAgfSAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDo2MDBweCkgeyAgICAgICAgLmRlcy10YWwgeyAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDsgICAgICAgIH0gICAgICAgIC5kZXMtdGFsLTIgeyAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDsgICAgICAgIH0gICAgICAgIC5tb2JpbGUtYmxvY2stY2VudGVyIHsgICAgICAgICAgbWFyZ2luOiAwIGF1dG8gIWltcG9ydGFudDsgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyAgICAgICAgfSAgICAgIH0gICAgPC9zdHlsZT4gICAgPHN0eWxlIHR5cGU9InRleHQvY3NzIj4gICAgICBodG1sLCAgICAgIGJvZHkgeyAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZhZmJmYzsgICAgICB9ICAgICAgcCB7ICAgICAgICBjb2xvcjogIzUyNUM2NTsgICAgICAgIG1hcmdpbjogMTVweCAwOyAgICBsaW5lLWhlaWdodDogMjRweDsgICAgICB9ICAgICAgaW1nIHsgICAgICAgIGRpc3BsYXk6IGJsb2NrOyAgICAgIH0gICAgICAuUmVhZE1zZ0JvZHkgeyAgICAgICAgd2lkdGg6IDEwMCU7ICAgICAgfSAgICAgIC5FeHRlcm5hbENsYXNzIHsgICAgICAgIHdpZHRoOiAxMDAlOyAgICAgIH0gICAgICAqIHsgICAgICAgIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogbm9uZTsgICAgICB9ICAgICAgLndoaXRlTGlua3MgYTpsaW5rLCAgICAgIC53aGl0ZUxpbmtzIGE6dmlzaXRlZCB7ICAgICAgICBjb2xvcjogI2ZmZmZmZiAhaW1wb3J0YW50OyAgICAgIH0gICAgICAgICAgICAuYXBwbGVMaW5rc0RhcmtHcmV5IGEgeyAgCWNvbG9yOiAjNTI1YzY1IWltcG9ydGFudDsJCXRleHQtZGVjb3JhdGlvbjogbm9uZSFpbXBvcnRhbnQ7CQl9ICAgICAgLmFwcGxlTGlua3NHcmV5IGEgeyAgICAgICAgY29sb3I6ICNiN2JkYzEgIWltcG9ydGFudDsgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZSAhaW1wb3J0YW50OyAgICAgIH0gICAgICB0YWJsZSB7ICAgICAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlOyAgICAgIH0gICAgICAucHJlaGVhZGVyIHsgICAgICAgIGZvbnQtc2l6ZTogMXB4OyAgICAgICAgbGluZS1oZWlnaHQ6IDFweDsgICAgICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsgICAgICAgIG1zby1oaWRlOiBhbGw7ICAgICAgfSAgCQkgIC5ib2R5LXRleHQgewkJZm9udC1mYW1pbHk6IEFyaWFsLCBzYW5zLXNlcmlmOwkgIH0JICAJICAuYm9keS1oZWFkZXIgewkgICAgZm9udC1mYW1pbHk6IEhlbHZlY3RpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOwkJZm9udC1zaXplOiAyMHB4OwkJbGluZS1oZWlnaHQ6IDEwMCU7CSAgfSAgICAgIC8qIEFPTCBNYWlsIHRkIG92ZXJyaWRlcyAqLyAgICAgICNtYWluY29udGVudCB0ZCB7ICAgICAgICBjb2xvcjogIzUyNUM2NTsgICAgICB9ICAgIDwvc3R5bGU-ICA8L2hlYWQ-ICA8Ym9keSBiZ2NvbG9yPSIjZmFmYmZjIiBzdHlsZT0ibWFyZ2luOiAwcHg7IHBhZGRpbmc6IDBweDsgbWluLWhlaWdodDogMzAwcHg7IiB5YWhvbz0iZml4Ij4gICAgPCEtLVtpZiBndGUgbXNvIDldPjx4bWw-ICAgICAgPG86T2ZmaWNlRG9jdW1lbnRTZXR0aW5ncz4gICAgICAgIDxvOkFsbG93UE5HPjwvbzpBbGxvd1BORz4gICAgICAgIDxvOlBpeGVsc1BlckluY2g-OTY8L286UGl4ZWxzUGVySW5jaD4gICAgICA8L286T2ZmaWNlRG9jdW1lbnRTZXR0aW5ncz4gICAgPC94bWw-PCFbZW5kaWZdLS0-ICAgIDwhLS1baWYgbXNvXT4gICAgICA8c3R5bGUgdHlwZT0idGV4dC9jc3MiPiAgICAgICAgYm9keSwgdGFibGUsIHRkLCBhIHtmb250LWZhbWlseTogQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZiAhaW1wb3J0YW50O30gICAgICA8L3N0eWxlPiAgICA8IVtlbmRpZl0tLT4gICAgPHRhYmxlIGJvcmRlcj0iMCIgY2VsbHBhZGRpbmc9IjAiIGNlbGxzcGFjaW5nPSIwIiB3aWR0aD0iMTAwJSI-ICAgICAgPHRyPiAgICAgICAgPHRkIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiNmYWZiZmMiPiAgICAgICAgICA8Y2VudGVyIGJnY29sb3I9IiNmYWZiZmMiIHN0eWxlPSJ3aWR0aDoxMDAlO2JhY2tncm91bmQtY29sb3I6I2ZhZmJmYzstd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6MTAwJTstbXMtdGV4dC1zaXplLWFkanVzdDoxMDAlOyI-ICAgICAgICAgICAgPGRpdiBpZD0ibWFpbmNvbnRlbnQiIHN0eWxlPSJtYXgtd2lkdGg6NjIwcHg7IG1hcmdpbjowIGF1dG87Ij4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9InByZWhlYWRlciIgc3R5bGU9ImZvbnQtc2l6ZTogMXB4OyBsaW5lLWhlaWdodDoxcHg7IGRpc3BsYXk6IG5vbmUhaW1wb3J0YW50OyBtc28taGlkZTphbGw7Ij5TZWUgd2hhdCB5b3UnbGwgYnVpbGQgaW4gb3VyIFNjaG9vbCBvZiBBSSBOYW5vZGVncmVlIHByb2dyYW1zLjwvZGl2PiAgICAgICAgICAgICAgPCEtLVtpZiBndGUgbXNvIDldPiAgICAgICAgICAgICAgICA8dGFibGUgYm9yZGVyPSIwIiBjZWxscGFkZGluZz0iMCIgY2VsbHNwYWNpbmc9IjAiIHN0eWxlPSJ3aWR0aDo2MjBweDsiPiAgICAgICAgICAgICAgICAgIDx0cj4gICAgICAgICAgICAgICAgICAgIDx0ZCB2YWxpZ249InRvcCI-ICAgICAgICAgICAgICA8IVtlbmRpZl0tLT4gICAgICAgICAgICAgIDx0YWJsZSBib3JkZXI9IjAiIGNlbGxwYWRkaW5nPSIwIiBjZWxsc3BhY2luZz0iMCIgc3R5bGU9IndpZHRoOjEwMCU7Ij4gICAgICAgICAgICAgICAgPHRyPiAgICAgICAgICAgICAgICAgIDx0ZD4gICAgICAgICAgICAgICAgICAgIDx0YWJsZSBib3JkZXI9IjAiIGNlbGxwYWRkaW5nPSIwIiBjZWxsc3BhY2luZz0iMCIgc3R5bGU9IndpZHRoOjEwMCU7Ij4gICAgICAgICAgICAgICAgICAgICAgPHRyPiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBhbGlnbj0iY2VudGVyIiBzdHlsZT0icGFkZGluZy1ib3R0b206NXB4OyI-ICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgYm9yZGVyPSIwIiBjZWxscGFkZGluZz0iMCIgY2VsbHNwYWNpbmc9IjAiIHN0eWxlâ€¦CAgICAgICAgICAgICAgICAgICAgIDwvdGQ-ICAgICAgICAgICAgICAgICAgICAgIDwvdHI-ICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPiAgICAgICAgICAgICAgICAgIDwvdGQ-ICAgICAgICAgICAgICAgIDwvdHI-ICAgICAgICAgICAgICAgIDx0cj4gICAgICAgICAgICAgICAgICA8dGQgYWxpZ249ImNlbnRlciIgc3R5bGU9InBhZGRpbmctYm90dG9tOjQwcHg7Ij4gICAgICAgICAgICAgICAgICAgIDx0YWJsZSBib3JkZXI9IjAiIGNlbGxwYWRkaW5nPSIwIiBjZWxsc3BhY2luZz0iMCIgc3R5bGU9ImZvbnQtZmFtaWx5OidPcGVuK1NhbnMnLCAnT3BlbiBTYW5zJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsgZm9udC1zaXplOjEycHg7IGxpbmUtaGVpZ2h0OjE4cHg7ICB0ZXh0LWFsaWduOmNlbnRlcjsiPiAgICAgICAgICAgICAgICAgICAgICA8dHI-ICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJib2R5LXRleHQiIGFsaWduPSJjZW50ZXIiIHN0eWxlPSJjb2xvcjojYjdiZGMxOyBmb250LWZhbWlseTonT3BlbitTYW5zJywgJ09wZW4gU2FucycsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7IGZvbnQtc2l6ZToxMnB4OyBsaW5lLWhlaWdodDoxOHB4OyAgdGV4dC1hbGlnbjpjZW50ZXI7Ij4gICAgICAgICAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPSJjb2xvcjojYjdiZGMxOyI-PHNwYW4gY2xhc3M9ImFwcGxlTGlua3NHcmV5Ij48YSBocmVmPSIiIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZSFpbXBvcnRhbnQ7Y29sb3I6I2I3YmRjMTsiPjI0NjUgTGHigI10aGFtIFPigI10LsKgIOKAoiDCoE1vdeKAjW50YWluIFbigI1pZXcsIEPigI1BIDk04oCNMDQwPC9hPjwvc3Bhbj48L3A-ICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT0iTWFyZ2luOjE1cHggMCAwIDA7Y29sb3I6I2I3YmRjMTsiPllvdSd2ZSByZWNlaXZlZCB0aGlzIGVtYWlsIGJlY2F1c2UgeW91IHNpZ25lZCB1cCB0byByZWNlaXZlIGVtYWlsIHVwZGF0ZXMgZm9yIFVkYWNpdHkuPC9wPiAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9Ik1hcmdpbjoxMHB4IDAgMCAwOyI-PGEgaHJlZj0iaHR0cHM6Ly9tY2xpY2sudWRhY2l0eS5jb20vY3VzdG9tZXIvdW5zdWJzY3JpYmU_dWlkPThiOGUzMWRiLTYzZTItNGU2Yy1hM2M0LWNmMWQ2NTA1NzRhNyZtaWQ9ZTVkYWQxMTUtZTg5My00ZTZhLTk1ZGEtNzIyNjAwZDgyOWRhJmVpZD01NDI1NTMzMy02N2IwLTU0NTUtNWQ4MS04ZDkxOTBlODg3M2MiIHN0eWxlPSJjb2xvcjojYjdiZGMxIDsgdGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTsiIHRpdGxlPSJMaW5rOiBodHRwczovL3d3dy51ZGFjaXR5LmNvbS9zdGF0dXMvdW5zdWJzY3JpYmVkIj5VbnN1YnNjcmliZTwvYT48L3A-ICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4gICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgIDwvdGFibGU-ICAgICAgICAgICAgICAgICAgPC90ZD4gICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgIDwvdGFibGU-ICAgICAgICAgICAgICA8IS0tW2lmIGd0ZSBtc28gOV0-ICAgICAgICAgICAgICAgICAgICA8L3RkPiAgICAgICAgICAgICAgICAgIDwvdHI-ICAgICAgICAgICAgICAgIDwvdGFibGU-ICAgICAgICAgICAgICA8IVtlbmRpZl0tLT4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8ZGl2IHN0eWxlPSIgd2lkdGg6MTAwJTsiPiAgICAgICAgICAgICAgPHRhYmxlIGJvcmRlcj0iMCIgY2VsbHBhZGRpbmc9IjAiIGNlbGxzcGFjaW5nPSIwIiBzdHlsZT0id2lkdGg6MTAwJTsiPiAgICAgICAgICAgICAgICA8dHI-ICAgICAgICAgICAgICAgICAgPHRkIGFsaWduPSJjZW50ZXIiIGJnY29sb3I9IiM3ZDk3YWQiIHN0eWxlPSJwYWRkaW5nOjEwcHggMDsiPiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGJvcmRlcj0iMCIgY2VsbHBhZGRpbmc9IjAiIGNlbGxzcGFjaW5nPSIwIiBzdHlsZT0iZm9udC1mYW1pbHk6J09wZW4rU2FucycsICdPcGVuIFNhbnMnLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOyBmb250LXNpemU6MTRweDsgbGluZS1oZWlnaHQ6MTlweDsgIHRleHQtYWxpZ246Y2VudGVyOyB3aWR0aDphdXRvOyI-ICAgICAgICAgICAgICAgICAgICAgIDx0cj4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImJvZHktdGV4dCIgc3R5bGU9ImNvbG9yOiNmZmZmZmY7Ij5CZSBpbiBkZW1hbmQ8L3RkPiAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4gICAgICAgICAgICAgICAgICA8L3RkPiAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgPC90YWJsZT4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgPC9jZW50ZXI-ICAgICAgICA8L3RkPiAgICAgIDwvdHI-ICAgIDwvdGFibGU-ICA8aW1nIHNyYz0iaHR0cHM6Ly9tY2xpY2sudWRhY2l0eS5jb20vdHJhY2s_dWlkPThiOGUzMWRiLTYzZTItNGU2Yy1hM2M0LWNmMWQ2NTA1NzRhNyZlaWQ9NTQyNTUzMzMtNjdiMC01NDU1LTVkODEtOGQ5MTkwZTg4NzNjJm1pZD1lNWRhZDExNS1lODkzLTRlNmEtOTVkYS03MjI2MDBkODI5ZGEmYT1vcGVuIiBkYXRhLWJzZnQtb3Blbi1waXhlbD0iIiAvPg0KDQo8aW1nIHNyYz0iaHR0cHM6Ly90Y2xpY2sudWRhY2l0eS5jb20vd2Yvb3Blbj91cG49am1vQldwN2tNOG1seWhWand1Y3RTSHJLV2hMZHF3ek90VWYzeUtweUgtMkJmczgwWTNqcEYzSTU2akZ2TFJyMmxwNThqWnZvZmFmSFZUTGRnb3BQU0xGdHRVNTlNdkU4VWhqcy0yRjRGalhGSjc3a1Y3ZjFHcG5vRDlGcVhBaE5YNjJaRG81LTJCVFNYbFlpakhNTndwcW95b2tETWJvZXY0RkZ6MFRkaHA5ZUU5NFdnRW0wV3Y4N0t5b3BqTGg3bnRyc01ZLTJGbWVGcFZXQjhUZjNaWWJFWFFlQ0czdDhTaS0yRi0yRnRoSy0yQjdxTFI1dndSWEYyZ1RPbFZIMnlObm56b3owMWdKNUNBNzgzYU41TmVPd0NqaTF1TnduN3Y5eExDY3hqZnotMkJWTTBFdlJ6WTRFWXBSZ09SbFNGNjFEM1hPbTFXUjFVa3dtd1FUenJ4bE9qZnJrYUlPazE3aW80QUtZMDBxOEkwVndUYmdJaXd5S01ZbG9XU0NFOHk4cTQ5dDRiMjhCWkhkdDVxc25HN01Zb1BoOEc2VFJhRERUcEVwWWNUNTRNODBNNjIxa2JHeXNJYi0yQmhKLTJCbDJ2MlBmV3NDSFlqVHhXLTJGSlVSa3RzWFBrWUZUSFk4U0xETzVxQWtmVTFOa0owT2FleXVRWVVRY2Nad1J1ekJKNDdiZlBRbDVaV09VN213TkI0ZUNlc1BueFhlN09MVUpVV0dpM2cxc3RhdjkyLTJGTXVrUi0yQmtTLTJGc09Jd1E4cGlQeVBQUWZoRkhxR3AxS2d3OFVoNGpjUE9Ea1dFRXJhbHFxTFBHcXBwQm5ibGNFSDNRQmhiR0g5RGFyUVpJM1phR20xQms4M1dHRHdvVmtwTGt1dHZGcVVyakc3SWlPZXc3cEhNZDRWYUcyQnNQNnZoY2VWQVU5RHZrYkU1RktzLTNEIiBhbHQ9IiIgd2lkdGg9IjEiIGhlaWdodD0iMSIgYm9yZGVyPSIwIiBzdHlsZT0iaGVpZ2h0OjFweCAhaW1wb3J0YW50O3dpZHRoOjFweCAhaW1wb3J0YW50O2JvcmRlci13aWR0aDowICFpbXBvcnRhbnQ7bWFyZ2luLXRvcDowICFpbXBvcnRhbnQ7bWFyZ2luLWJvdHRvbTowICFpbXBvcnRhbnQ7bWFyZ2luLXJpZ2h0OjAgIWltcG9ydGFudDttYXJnaW4tbGVmdDowICFpbXBvcnRhbnQ7cGFkZGluZy10b3A6MCAhaW1wb3J0YW50O3BhZGRpbmctYm90dG9tOjAgIWltcG9ydGFudDtwYWRkaW5nLXJpZ2h0OjAgIWltcG9ydGFudDtwYWRkaW5nLWxlZnQ6MCAhaW1wb3J0YW50OyIvPg0KPC9ib2R5PjwvaHRtbD4NCg=='
print(base64.b64decode(a))

