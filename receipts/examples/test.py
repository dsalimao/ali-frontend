#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import base64

a='<!DOCTYPE html>
<html lang="en">

<head>
  <title>Welcome: Thank you for Signing Up for H Mart Email Receipts!</title>
  <meta http-equiv="Content-Type" content="text/html charset=UTF-8"/>
  <meta name="index-template-version"
        content="1.5" />
  <meta name="viewport"
        content="width=device-width, initial-scale=1.0" />
  <style type="text/css">
/* START main.css */
html,body,table,tbody,thead,tr,th,td,img,div,span,a,address,hr {
  font-family: "Helvetica Neue", HelveticaNeue, "TeX Gyre Heros", TeXGyreHeros, FreeSans, "Nimbus Sans L", "Liberation Sans", Arimo, Helvetica, Arial, sans-serif; font-size: 14px; box-sizing: border-box; margin-top: 0; margin-right: 0; margin-bottom: 0; margin-left: 0; padding-top: 0; padding-right: 0; padding-bottom: 0; padding-left: 0; color: #5B5B5B;
}

img {
  border: none;
}

a {
  text-decoration: none; font-size: inherit; color: #5B5B5B;
}

a:hover {
  color: #3E3E3E;
}

a:visited {
  color: #3E3E3E;
}

address {
  font-size: inherit; font-style: normal;
}

th {
  font-weight: normal; text-align: left;
}

td,
th {
  padding: 0.5em;
}

table, thead, tbody, tr, td, th {
  background-color: #FFFFFF;
}

body {
  background-color: #EEEEEE;
}

.grayline {
  margin-top: 0; margin-bottom: 0; border-top: 1px solid #DDDDDD; border-right: 0 none transparent; border-bottom: 0 none transparent; border-left: 0 none transparent;
}

.section .grayline {
  margin-top: 1em; margin-bottom: 1em;
}

/* GENERAL */
.main {
  position: static; width: 100vw; max-width: 400px; margin: auto auto; padding-top: 15px; padding-right: 15px; padding-bottom: 15px; padding-left: 15px; background-color: #FFFFFF;
}

.section {
  margin-top: 2em; margin-bottom: 2em; margin-left: auto; margin-right: auto;
}

.merchantinfo {
  text-align: center; font-size: 0.8em;
}

.merchantinfo a {
  font-size: inherit; color: #5B5B5B;
}

.merchantinfo address {
  font-size: inherit;
}

.merchantinfo-url {
  font-weight: bold; display: block; color: #2B2B2B;
}

.sociallinks {
  text-align: center; margin-top: 2em;
}

.sociallinks .ico {
  width: 32px; height: 32px; display: inline-block;
}

.footer {
  text-align: center; background-color: #EEEEEE; margin-top: 2em; padding-bottom: 5em;
}

.footer-item {
  margin-bottom: 1em;
}

.footer-copyright {
  font-size: 0.8em; margin-bottom: 0.4em; margin-top: 1em;
}

.footer-item {
  font-size: 0.8em;
}

.footer a {
  color: #5B5B5B;
}

.separator {
  padding-left: 0.5em; padding-right: 0.5em;
}
/* END main.css */

/* START welcome.css */

.logo {
  position: relative; margin-right: auto; margin-left: auto; text-align: center;
}

.logo img {
  height: 80px;
}

.main {
  padding-left: 0;
  padding-right: 0;
  width: 100vw;
  max-width: 400px;
}

.section {
  width: auto;
  max-width: 330px;
}

.section-title {
  text-align: center;
}

.section-header {
  text-align: center;
}

.section-description {
  text-align: center;
}

.section-description p {
  font-size: 16px;
  line-height: 24px;
  font-weight: 200;
}

.thank-you .section-title {
  font-size: 1.5em;
}

.go-green .section-title {
  color: #E86D44;
}

.easy-and-convenient .section-title {
  color: #17BED4;
}

.faster-checkout .section-title {
  color: #0F3599;
}

.prefer-paper-receipts .section-title {
  color: #666666;
}

.sociallinks {
  margin-top: 2em;
}

.link {
  text-decoration: underline !important;
}

/* END welcome.css */
  </style>
</head>

<body yahoofix="true">
<table width="100%" border="0" cellspacing="0" cellpadding="0" style="background-color:#EEEEEE;">
  <tr>
    <td style="background-color:#EEEEEE;">
      <table class="main welcome">
        <tr>
          <td>
            <table class="section">
              
                            <tr>
                <td class="logo">
                  <img src="https://indexprod.imgix.net/MR)superhmart%3EIM)157ce6046b0ce8196b7b"
                       alt="H Mart Logo"
                       border="0" height="80"/>
                </td>
              </tr>
                            
              <tr>
                <td>
                  <div class="section-header">
                    <h1 class="section-title">
                      Thank You for signing up for H Mart E-Receipts.
                    </h1>
                  </div>
                </td>
              </tr>
            </table>
            <hr class="grayline" />
            <table class="go-green section">
              <tr>
                <td>
                  <div class="section-header">
                    <img src="https://s3-us-west-1.amazonaws.com/s3.goindex.com/mailing/shared/version_1.5/icon-go-green/icon-go-green@3x.png"
                         alt="Go Green" width="70" height="70" border="0"/>
                    <h2 class="go-green-title section-title">Go Green</h2>
                  </div>
                  <div class="section-description">
                    <p>You're saving paper by choosing convenient and environmentally friendly e-receipts.</p>
                  </div>
                </td>
              </tr>
            </table>
            <hr class="grayline" />
            <table class="easy-and-convenient section">
              <tr>
                <td>
                  <div class="section-header">
                    <img src="https://s3-us-west-1.amazonaws.com/s3.goindex.com/mailing/shared/version_1.5/icon-easy-and-convenient/icon-easy-and-convenient@3x.png"
                         alt="Easy and Convenient" width="70" height="70" border="0"/>
                    <h2 class="section-title">Easy and Convenient</h2>
                  </div>
                  <div class="section-description">
                    <p>Digital receipts can be saved in your inbox so you can easily access them anytime.</p>
                  </div>
                </td>
              </tr>
            </table>
            <hr class="grayline" />
            <table class="faster-checkout section">
              <tr>
                <td>
                  <div class="section-header">
                    <img src="https://s3-us-west-1.amazonaws.com/s3.goindex.com/mailing/shared/version_1.5/icon-faster-checkout/icon-faster-checkout@3x.png"
                         alt="Faster Checkout" width="70" height="70" border="0"/>
                    <h2 class=" section-title">Faster Checkout</h2>
                  </div>
                  <div class="section-description">
                    <p>The next time you shop with us and use your card, we’ll automatically remember your preference for e-receipts.</p>
                    <p>Multiple cards? No problem. Just enter your email when you use another card and we’ll remember that one too.</p>
                  </div>
                </td>
              </tr>
            </table>
            <hr class="grayline" />
            <table class="prefer-paper-receipts section">
              <tr>
                <td>
                  <div class="section-header">
                    <img src="https://s3-us-west-1.amazonaws.com/s3.goindex.com/mailing/shared/version_1.5/icon-prefer-paper-receipts/icon-prefer-paper-receipts@3x.png"
                         alt="Prefer Paper Receipts" width="70" height="70" border="0"/>
                    <h2 class="section-title">Prefer Paper Receipts</h2>
                  </div>
                  <div class="section-description manage-link">
                    <p>Manage your preferences or unsubscribe <a class="link-unsubscribe link" href="http://email.receipt.mail.index.com/c/eJxFj0tPg0AUhX8NLMmdB8ywmAWtbWytGmNpKzvmBVhegcGqv97RjclZ3HNOcnM-JabrrWOhFlbzBMJGYEAcKCRASUziCEUAPAWCkxhIuskwDShMRplmdFFXNm3U9Np8RmrowlpoxqyOLWDESkU5olbj0hDvsEFlIsNW1M6Nc0CyAG-9SqWGpXfz_xcfqmV2Q2cmfy79vMhZTY003mkfFLjonvNVL8_bUa7jd4nBN-sKPeVN-60vq1Z1tXu77GHTrCabDQ8f_CBfbS7342O8y9r7zyur8uO5qLPtiNLjmQz6kLyEk7iVfWVt6gGrP7JfJieAJSYhimEJKWPADSeIcK6A05hyDqFfquqydzstjqfdqMjpVlz2gx_4pbOA3Hn9ANHzbwc">here</a>.</p>
                  </div>
                </td>
              </tr>
            </table>
            <hr class="grayline" />
            <table class="powered-by-index section">
              <tr>
                <td>
                  <div class="section-header">
                    <img src="https://s3-us-west-1.amazonaws.com/s3.goindex.com/mailing/shared/version_1.5/img-index-logo-color/index-logo-color@3x.png"
                         width="281" height="27" alt="Index Logo" border="0"/>
                  </div>
                  <div class="section-description">
                    <p>We've partnered with Index to go digital</p>
                    <p> If you’d like to learn more about our policies, follow these links:</p>
                    <p><a href="http://email.receipt.mail.index.com/c/eJxFjcFqxCAURb8mLuXlPaPPhYtAOzBdl2npzqiZhI6ZkBFs_762m8KBy92cE9zxWbMR0c2RNYjVIfQMCjQoGmiQvQRgC4R6ALLPI6pOwZFCWvcis19vct1i-pLhnsXigElhJIY0sfGkCQ1YDD4GxR5RiZtbStkfHY0dnhq11n9B-yUd-dFWHK767TrPtuWuf53fQnFgdNIUDE5gjQFOTD0xB2A1KGYQOR1h8Vs5R_d6Oe-BLvXj_eU-vZ2-49jRU-MHXwlHSg" class="link">Terms &amp; Conditions</a><span class="separator">|</span>
                      <a href="http://email.receipt.mail.index.com/c/eJxFjbluwzAQBb9GLIkll8eyYCHAMWDXgROko3hYQixZkIUw_vswaQJM8V4zE_32WWfLki-JDLDJSxAECgwo1Ki54ADkAKXRgO6ll6pTsOWYp3Xnc5hufFpS_ubxPrPRG52yMHawFK0sOilEJQy4EouKITh28-O-r48O-04eG7XWf0H76zZ9hfhsi22-huVaimvB61_pt7F7sCYbbP4BnLVAmVAgUQRSWhEBm_MWx7Dsp-RfL6c14qV-vJ_vw9vxmfoOD40fZwZIww" class="link">Privacy Policy</a></p>
                  </div>
                </td>
              </tr>
            </table>
            <hr class="grayline" />
            <table class="merchant-info section">
              <tr>
                <td>
                  <div class="merchantinfo section-description">
                    <a href="http://email.receipt.mail.index.com/c/eJwdjctqwzAQRb_GWoqxRo_RQgtDGkjXJS3dyRo5dhs5Rgjc_n3dwFldOOemUL_34gSHicmCWIKCnkCDBY0GjewlAHlAZQ2gfxmU7jTUnPKyNVnicpfLyvlHpkcRc1AmOjasD1Mhs_KcU09W0TTCZMGJe5hb2zocOnU-WL_kXGJtT72GPa63afLHw-2Z_l9bAGezxeTUCN45oEzYI1EC0kYTgSi5pjmu7cLh7XrZEl73z4_Xx_h-_uWhw9PBH-PJQ1c"
                       class="merchantinfo-url">http://nj.hmart.com</a>
                    <address class="merchantinfo-address">
                      <span class="merchantinfo-street">1179 S De Anza Blvd</span><br/>
                      <span class="merchantinfo-city">San Jose</span>,
                      <span class="merchantinfo-state">CA</span>
                      <span class="merchantinfo-zip">95129</span>
                    </address>
                    <a href="tel:(408) 418-1601" class="merchantinfo-phone">(408) 418-1601</a>
                  </div>

                  <div class="sociallinks">
                                                                                                                                          </div>
                </td>
              </tr>
            </table>
          </td>
        </tr>
      </table>
      <div class="footer">
        <div class="footer-item footer-copyright">Copyright &copy; 2018
          H Mart. All Rights Reserved
        </div>
        <div class="footer-item">
          <a href="http://email.receipt.mail.index.com/c/eJxFjcFqxCAURb8mLuXlPaPPhYtAOzBdl2npzqiZhI6ZkBFs_762m8KBy92cE9zxWbMR0c2RNYjVIfQMCjQoGmiQvQRgC4R6ALLPI6pOwZFCWvcis19vct1i-pLhnsXigElhJIY0sfGkCQ1YDD4GxR5RiZtbStkfHY0dnhq11n9B-yUd-dFWHK767TrPtuWuf53fQnFgdNIUDE5gjQFOTD0xB2A1KGYQOR1h8Vs5R_d6Oe-BLvXj_eU-vZ2-49jRU-MHXwlHSg">Terms &amp; Conditions</a><span class="separator">|</span>
          <a href="http://email.receipt.mail.index.com/c/eJxFjbluwzAQBb9GLIkll8eyYCHAMWDXgROko3hYQixZkIUw_vswaQJM8V4zE_32WWfLki-JDLDJSxAECgwo1Ki54ADkAKXRgO6ll6pTsOWYp3Xnc5hufFpS_ubxPrPRG52yMHawFK0sOilEJQy4EouKITh28-O-r48O-04eG7XWf0H76zZ9hfhsi22-huVaimvB61_pt7F7sCYbbP4BnLVAmVAgUQRSWhEBm_MWx7Dsp-RfL6c14qV-vJ_vw9vxmfoOD40fZwZIww">Privacy Policy</a>
        </div>
        <div class="footer-item manage-link">
          <a class="link-not-receipt link" href="http://email.receipt.mail.index.com/c/eJxFj8lOw0AQRL_GPlrt2Tw-zMEJsUgIIEScBN9m80K8yZmQwNczICSkOlR3S9X1tJhP1z4JjagMZxC2AkHMgQADgimmURwB8BQwYhRwusoQCQjMVtt2clEv2y5qB2NvkR77sBGKKaBIcUkTEzPJrI0ZqRCvkJSEIBp2onFuOgc4C1DuJbUeL4M7_6f4pb6c3djb2dthdP3n3zs_GpRfSlT2z8ViUId8Ukv6rhD4y7KOn4q2-zLHRaf7xr0dN7BqF3OVjQ8ffKteq0Jtpke6zrr72ympi92hbLJ8itPdAY9my17CWVzlUFdV6gnrX7QfKCcgYZZhnSAFaZIAtxzHmHMNnFDCOYS-qm7k4NZG7PbrSeP9tTxuRl_w02QBvvP6BgXobyg">Not My Receipt</a><span class="separator">|</span>
          <a class="link-unsubscribe link" href="http://email.receipt.mail.index.com/c/eJxFj0tPg0AUhX8NLMmdB8ywmAWtbWytGmNpKzvmBVhegcGqv97RjclZ3HNOcnM-JabrrWOhFlbzBMJGYEAcKCRASUziCEUAPAWCkxhIuskwDShMRplmdFFXNm3U9Np8RmrowlpoxqyOLWDESkU5olbj0hDvsEFlIsNW1M6Nc0CyAG-9SqWGpXfz_xcfqmV2Q2cmfy79vMhZTY003mkfFLjonvNVL8_bUa7jd4nBN-sKPeVN-60vq1Z1tXu77GHTrCabDQ8f_CBfbS7342O8y9r7zyur8uO5qLPtiNLjmQz6kLyEk7iVfWVt6gGrP7JfJieAJSYhimEJKWPADSeIcK6A05hyDqFfquqydzstjqfdqMjpVlz2gx_4pbOA3Hn9ANHzbwc">Unsubscribe</a></div>
        <div class="powered-by-index">
          <a href="http://email.receipt.mail.index.com/c/eJxNjbtOxDAQAL8mLq2N14914SLScdJRowPRJd7NJeKSi4Ilw98TqJCmmmImp_2jLkFxGpk8qDkZaAkseLDo0OlWA1AENN4BxqfO2MbCLlnmreiln-96Xlm-dH4sakoDgIORh8hsHAj3TsSFaKJxgbNldU9TKdtng11jzge11n-BPdV-vY1jPB63v_ivLQmCF485mAFiCEBC2CJRBrLOEoFaZM9Tv5YLp5frZct4re9vz4_h9fzNXYOngx_igETf">
            <img src="https://s3-us-west-1.amazonaws.com/s3.goindex.com/mailing/shared/version_1.5/img-powered-by-index/img-powered-by-index@3x.png"
                 border="0" width="146" height="14" alt="Powered by Index"/>
          </a>
        </div>
      </div>
    </td>
  </tr>
</table>
<img width="1px" height="1px" alt="" src="http://email.receipt.mail.index.com/o/eJwdzM1uwjAQReGnwUvrOuOf8cILJKhE1xWtujMzDkQ0AUWRAm9fWulsvyNlvq5jMlp65QgzlA6O4RHhKVCwzgKcQV0MoLzfdn7jMTdpw32xYx1-7DBpe1i5jeZSKAh6rTUGx6oqWTU6SjlRq1DvzVzWOp37Pr8u53_-B5eCFFskSd0JOSVwY3LELGAfPDPM2Ga51Gk5aPk4Hu5Cx_X76_12-nx76nZDu1e_EFA68g"></body>

</html>
'
print(base64.urlsafe_b64decode(a))

